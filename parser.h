#include <iostream>
#include <argp.h>
using namespace std;

static struct argp_option options[] = {
	{"interarrival_transaction_time",'t',0, 0, "inter arrival time between transactions", 1},
	{"interarrival_block_time", 'k',0, 0, "mean interarrival block time", 2},
	{"max_blocks", 'b',0, 0, "number of blocks to terminate", 4},
	{"initial_amt", 'a',0, 0, "initial coins for each node", 5},
	{"frac_slow", 'i',0, 0, "fraction of slow(slow on network,  high latency) nodes", 6},
	{"seed",'s',0, 0, "for randomness in simultaion", 8},
	{"max_transactions",'x',0, 0, "Number of Transactions for stopping criteria", 9},
	{"graph", 'g',0, 0, "path of graph file generated by python", 10},
	{"g1", 'z',0, 0, "hashing power of selfish miner 1", 11},
	{"g2", 'y',0, 0, "hashing power of selfish miner 2", 12},
	{0, 0, 0, 0, 0, 0}
};

struct arguments {
	float interarrival_transaction_time;
	float interarrival_block_time;
	int max_blocks;
	int initial_amt;
	float frac_slow;
	int seed;
	int max_transactions;
	char* graph;
	float g1;
	float g2;
};

static error_t parse_opt(int key, char *arg, struct argp_state *state) {
    struct arguments *args = static_cast<struct arguments *>(state->input);
    switch (key) {
		case 't':
			args->interarrival_transaction_time = stof(arg);
			break;
		case 'k':
			args->interarrival_block_time = stof(arg);
			break;
		case 'b':
			args->max_blocks = stoi(arg);
			break;
		case 'a':
			args->initial_amt = stoi(arg);
			break;
		case 'i':
			args->frac_slow = stof(arg);
			break;
		case 's':
			args->seed = stoi(arg);
			break;
		case 'x':
			args->max_transactions = stoi(arg);
			break;
		case 'g':
			args->graph = arg;
			break;
		case 'z':
			args->g1 = stof(arg);
			break;
		case 'y':
			args->g2 = stof(arg);
			break;
        case ARGP_KEY_ARG:
            if (state->arg_num >= 2)
                argp_usage(state);
            break;
        default:
            return ARGP_ERR_UNKNOWN;
    }

    return 0;
}

