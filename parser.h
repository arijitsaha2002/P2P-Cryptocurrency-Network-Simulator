#include <iostream>
#include <argp.h>
using namespace std;

static char doc[] = "arguments parser for blockchain simulation";
static char args_doc[] = "";

static struct argp_option options[] = {
	{"interarrival_transaction_time",'t', "time", 0, "inter arrival time between transactions"}, 
	{"interarrival_block_time", 'k', "time", 0, "mean interarrival block time"},
	{"max_blocks", 'b', "block", 0, "number of blocks to terminate"},
	{"initial_amt", 'a', "amt", 0, "initial coins for each node"},
	{"frac_slow", 'i', "frac_slow", 0, "fraction of slow(slow on network,  high latency) nodes"},
	{"frac_low_cpu", 'c', "frac_low_cpu", 0, "fraction of low cpu(low hashing power) nodes"},
	{"seed",'s', "seed", 0, "for randomness in simultaion"},
	{"max_transactions",'x', "transactions", 0, "Number of Transactions for stopping criteria"},
	{"graph", 'g', "file", 0, "path of graph file generated by python"},
};

struct arguments {
	float interarrival_transaction_time;
	float interarrival_block_time;
	int max_blocks = 250;
	int initial_amt = 50;
	float frac_slow = 0.4;
	float frac_low_cpu = 0.4;
	int seed = 44;
	int max_transactions = -1;
	string graph = "graph";
};

static error_t parse_opt(int key, char *arg, struct argp_state *state) {
    struct arguments *args = static_cast<struct arguments *>(state->input);

    switch (key) {
		case 't':
			args->interarrival_transaction_time = stof(arg);
		case 'k':
			args->interarrival_block_time = stof(arg);
		case 'b':
			args->max_blocks = stoi(arg);
		case 'a':
			args->initial_amt = stoi(arg);
		case 'i':
			args->frac_slow = stof(arg);
		case 'c':
			args->frac_low_cpu = stof(arg);
		case 's':
			args->seed = stoi(arg);
		case 'x':
			args->max_transactions = stoi(arg);
		case 'g':
			args->graph = string(arg);
        case ARGP_KEY_ARG:
            if (state->arg_num >= 2)
                argp_usage(state);
            break;
        default:
            return ARGP_ERR_UNKNOWN;
    }

    return 0;
}

